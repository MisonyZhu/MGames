using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEngine;
using UnityEngine.UI;
using UnityEditor;

[CustomEditor(typeof(UIGenerator))]
public class UIGeneratorEditor : Editor
{
    public override void OnInspectorGUI()
    {
        base.OnInspectorGUI();

        if (GUILayout.Button("Generate Code"))
        {
            Generate();
        }
    }

    const string UI_CODE_DIR = "Assets/Src/Game/UI";
    const string PREFAB_PATH_FORMAT = "UI/{0}.prefab";
    UIGenerator m_Generator;
    string m_UIName;

    void Generate()
    {
        m_Generator = target as UIGenerator;
        m_UIName = m_Generator.name;
        
        string ui_path = UI_CODE_DIR + "/" + m_Generator.name;
        
        if (!Directory.Exists(ui_path))
            Directory.CreateDirectory(ui_path);
        
        List<Transform> controls = new List<Transform>();
        FindControls(m_Generator.transform, controls);

        EditorUtility.SetDirty(m_Generator);
        m_Generator.controls = controls.ToArray();

        GenerateFileGenerated();
        GenerateFile();

        EditorUtility.DisplayDialog("UIGenerator", "生成成功", "确定");
    }

    void FindControls(Transform transform, List<Transform> controls)
    {
        if (IsControl(transform))
        {
            controls.Add(transform);
        }

        foreach (Transform child in transform)
        {
            FindControls(child, controls);
        }
    }

    bool IsControl(Transform transform)
    {
        return transform.gameObject.CompareTag("UIControl");
    }

    const string UI_FILE_GENERATED_FORMAT = @"// automatically generated by the UIGenerator, do not modify
namespace Game
{{
    partial class {0}
    {{{1}

        protected override string prefabPath => ""{2}"";

        public {0}()
            : base(UILayer.{3}, {4}, UIHideType.{5}, UIHideFunc.{6}, UIEscClose.{7}, {8})
        {{
            Init();
        }}

        void InitControls()
        {{{9}
        }}
    }}
}}";

    const string CONTROL_FIELD_FORMAT = @"
        UIControl {0};";
    const string INIT_CONTROL_FORMAT = @"
            {0} = GetControl({1});";

    void GenerateFileGenerated()
    {
        var controls = m_Generator.controls;
        StringBuilder controlFields = new StringBuilder();
        StringBuilder initControls = new StringBuilder();
        for (int i = 0; i < controls.Length; ++i)
        {
            string controlName = controls[i].name;
            controlFields.AppendFormat(CONTROL_FIELD_FORMAT, controlName);
            initControls.AppendFormat(INIT_CONTROL_FORMAT, controlName, i);
        }
        
        string filePath = UI_CODE_DIR +"/"+m_UIName + $" /{m_UIName}_Generated.cs";
        string prefabPath = string.Format(PREFAB_PATH_FORMAT, m_UIName);
        string fileText = string.Format(UI_FILE_GENERATED_FORMAT, m_UIName, controlFields, prefabPath,
            m_Generator.layer, m_Generator.orderInLayer, m_Generator.hideType, m_Generator.hideFunc,
            m_Generator.escClose, m_Generator.loadSync ? "true" : "false", initControls);
        File.WriteAllText(filePath, fileText);
    }

    const string UI_FILE_FORMAT = @"namespace Game
{{
    partial class {0} : SingletonUI<{0}>
    {{
        // 初始化
        void Init()
        {{
        }}

        // 界面加载完毕
        protected override void OnCreate()
        {{
            InitControls();
            RegistUIEvents();
        }}

        // 界面显示
        protected override void OnShow()
        {{
            RegistEvents();
            Refresh();
        }}

        // 界面隐藏
        protected override void OnHide()
        {{
        }}

        // 界面销毁
        protected override void OnDestroy()
        {{
        }}

        #region UI Event
        void RegistUIEvents()
        {{{1}
        }}{2}
        #endregion

        #region Game Event
        void RegistEvents()
        {{
        }}
        #endregion

        #region Refresh
        // 刷新界面
        public override void Refresh()
        {{
        }}
        #endregion
    }}
}}";

    const string REGIST_ONCLICK_FORMAT = @"
            {0}.onClick = {0}OnClick;";
    const string ONCLICK_FUNC_FORMAT = @"

        void {0}OnClick(UIControl control)
        {{
        }}";

    void GenerateFile()
    {
        string filePath = $"{UI_CODE_DIR}/{m_UIName}/{m_UIName}.cs";
        if (File.Exists(filePath)) return;

        var controls = m_Generator.controls;
        StringBuilder registUIEvents = new StringBuilder();
        StringBuilder uiEventFuncs = new StringBuilder();

        for (int i = 0; i < controls.Length; ++i)
        {
            var control = controls[i];
            if (control.GetComponent<Button>())
            {
                string controlName = control.name;
                registUIEvents.AppendFormat(REGIST_ONCLICK_FORMAT, controlName);
                uiEventFuncs.AppendFormat(ONCLICK_FUNC_FORMAT, controlName);
            }
        }

        string fileText = string.Format(UI_FILE_FORMAT, m_UIName, registUIEvents, uiEventFuncs);
        File.WriteAllText(filePath, fileText);
    }
}
